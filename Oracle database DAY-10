# DAY-10 학습내용

● Transaction 트랜잭션 
● 동시성 제어
● Sequence 시퀀스
● VIEW 뷰
● INDEX 인덱스

================================
1. Transaction Controll Language 트랜잭션 
  -> 어떤 하나의 작업에서의 일련과정, 진행의 한 단위 
  -> 예로 들자면 은행에 가서 돈을 출금을 할 때 현금 인출기에 카드를 넣고 화면에 "출금" 이라는 것을 누른 순간 출금이라는 기능에 대한 하나의 
  -> 트랜잭션이 시작되어 비밀번호 입력 후 정상적으로 돈을 출금하고 나서 처음 화면으로 돌아가면 트랜잭션이 끝난다.
  -> 이렇게 인출기에서 돈을 출금하는 일련의 과정의 단위를 트랜잭션이라고 한다.
  
  (1) 트랜잭션 관리 : COMMIT , ROLLBACK , SAVEPOINT
  (2) 트랜잭션 시작 : DB 즉 데이터베이스에서의 트랜잭션이 시작하는 순간은 첫번 째 DML사용구문 (CREATE ALTER DROP 문) 또는 DDL(INSERT, UPDATE, DELETE)
      구문을 만나면 트랜잭션이 시작된다.
      
      예 ) ALTER TABLE EMPLOYEE --> DDL구문을 만나 트랜잭션(1) 이 시작 
           DISABLE CONSTRAINT FK_MGR_ID --> 제약조건 이름 FK_MGR_ID를 저장하고 있는 컬럼의 제약조건을 비활성화로 변경
           
           SAVEPOINT S0; ■
           
           INSERT INTO DEPARTMENT --> DML구문 : 위에 첫번 째 DDL시작의 트랜잭션 안에서의 DML은 같은 트랜잭션으로 간주
           VALUES ('40', '홍보팀', 'A1'); -> 부서 테이블에서 데이터를 기록
           
           SAVEPOINT S1; ◆
           
           SELECT COUNT(*)
           FROM EMPLOYEE
           WHERE DEPT_ID IS NULL;  --> 부서번호가 NULL 인 값은 2
           
           UPDATE EMPLOYEE
           SET DEPT_ID = '40'
           WHERE DEPT_ID IS NULL; --> 부서번호가 NULL인 값에 40으로 변경
           
           SELECT COUNT(*)
           FROM EMPLOYEE
           WHERE DEPT_ID LIKE '40';  --> 결과 2 
           
           SAVEPOINT S2; ●
           
           DELETE FROM EMPLOYEE --> 40 부서번호 지움
           WHERE DEPT_ID LIKE '40' --> 여기 지점 까지가 하나의 트랜잭션(1)이다. (위에 DDL부터)
           
           ROLLBACK; --> 여기서 만약 ROLLBACK을 해준다면 처음 트랜잭션이 시작했던 지점부터 작성했던 명령들을 취소시킨다
           ※ 하지만 사용자가 원하는 지점까지만 취소하고 싶을 때 위에서 썼던 SAVEPOINT 를 이용해 원하는 곳부터 취소시킬 수 있다.
           
           ROLLBACK TO S2; --> ● SAVEPOINT S2 지점부터 취소시키며 DELET 문을 취소시킨다.
           
           SELECT COUNT(*)
           FROM EMPLOYEE
           WHERE DEPT_ID LIKE '40' --> 결과 확인 :  DELETE를 취소 했기 떄문에 카운트 갯수 : 2
           
           ROLLBACK TO S1; --> ◆ SAVEPOINT S1 지점부터 취소하며 UPDATE 구문을 취소시킨다.
           
           SELECT COUNT(*)
           FROM EMPLOYEE 
           WHERE DEPT_ID LIKE '40' --> 결과 확인 : UPDATE(변경)를 취소 했기 때문에 카운트 갯수 : 0
           
           ROLLBACK TO S0; --> ■ SAVEPOINT S0 지점부터 취소하며 INSERT 구문을 취소한다.
           
           SELECT * FROM DEPARTMENT; --> 결과 확인 ('40', '홍보팀', 'A1') 이 정보는 지워졌다.
            
           ==> 이렇게 ROLLBACK이 중요한 이유는 만약 오류상황이 발생하면 예로 들자면 은행에서 돈을 출금을 하던 도중 은행시스템에 문제가 생겨 
           ==> 멈춰버려 돈을 출금하지 못했는데 내 통장에 돈이 출금되는 이러한 상황이 생긴다면 오류가 생기면 지금까지 일어난 과정들을 취소시키고 
           ==> 다시 처음 시작하는 과정으로 돌리기 위해 ROLLBACK이 필요하다.
  ================================================================================================
  * 동시성 제어 : LOCK (잠금, 블로킹)
   --> 자바의 쓰레드에 동기화 부분 (동기화 처리) 이랑 개념과 비슷하다. 
   --> 예로 들자면 영화예매사이트에서 영화를 예매 할 때 만약 좌석이 14석이 남았고 그 영화 웹사이트에 동시 접속자가 1000명이고 
   --> 동시에 영화예매를 한다면 그 웹사이트는 오류가 날 수 있고 그것과 동시에 영화예매를 못 할수 있는 문제가 생긴다 
   --> 이러한 문제를 해결하기 위해 동시성 제어(블로킹)를 이용해 한 사용자가 영화 예매를 하고 있으면 다른 사용자들은 
   --> 그 사용자가 예약을 완료하기 전까지 접근을 못하게 막아준다 즉 블로킹 해주며 예약완료 동시에 다른 사용자가 예약할 수 있게\
   --> 다시 접근을 막았던 것을 풀어준다 이러한 과정을 동시성 제어라고 한다.!!
   
    ※ SQL/DEVELOPER 프로그램을 두개를 켜놓고 한개의 SQL/DEVELPER에서 데이터를 변경하고 다른 한개의 SQL/DEVELOPER에서 변경된 값을 
       확인 하려고 SELECT를 하지만 변경 된 데이터는 테이블에 들어가 있지 않고 원래 테이블에 기록되어 있는 데이터만 조회된다.
       이것을 해결하려면 변경 했던 SQL/DEVELOPER에서 COMMIT을 해주면 메모리에 저장이 되어 다른 SQL/DEVELOPER에서도 변경된 정보를 확인할 수 있다.
       끝으로 커밋을 안하면 동시에 접속 했을 때 다른 사용자는 변경된 정보를 보지 못한다!!!.

  ==================================================================================================
  * 시퀀스 SEQUENCE : 자동 숫자(정수) 발생기 (은행에서의 번호 발급기)
    -> 정수를 순차적으로 생성하는 객체 (발생기 객체) / 순차적으로 정수 숫자 값을 자동으로 발생하는 데이터베이스 객체이다
    ★ 구문형식 : CREATE SEQUENCE 시퀀스 이름
                 [ START WITH  시작숫자] --> 처음 숫자를 생성할 때 시작 숫자 / 생략하면 기본 값 1로 시작
                 [ INCREMENT BY 증감치 ] --> 숫자를 얼마씩 증가시킬 것인지 정의 / 생략하면 기본 값 1씩 증가
                 [ MAXVALUE 최대값 | NOMAXVALUE ] --> 생략되면 NOMAXVALUE 기본값 / 정의 할시 최대 얼마까지 증가시킬거냐 
                 [ MINVALUE 최소값 | NOMINVALUE ] --> 생략되면 NOMINVALUE 기본값 
                 [ CYCLE | NOCYCLE ] --> 순환시킬것인지 정의 / 생략하면 NOCYCLE
                 [ CACHE | NOCACHE ] --> CACHE (2 ~ 20) 까지 만들 수 있으며 (기본값 20) : 미리 메모리에 써준 숫자 개수 만큼 숫자를 저장해놓는다.
       * 시퀀스 객체 만들기 
        -> CREATE SEQUENCE SEQ_ID
           START WITH 300 --> 시작 값 300
           INCREMENT BY 5 --> 5씩 증가시키겟다
           MAXVAULE 315 --> 315까지 숫자를 생성
           NOCYCLE --> 315가 되면 더 이상 생성 안하겠다
           NOCACHE; --> 메모리에 미리 숫자를 저장하지 않겟다.
      * 시퀀스를 사용 :  시퀀스 이름.NEXTVAL을 사용해야 숫자가 발생한다.
       -> SELECT SEQ_ID.NEXTVAL FROM DUAL; --> 4번 째 실행했을 때 ERROR 가 난다 이유 : NOCYCLE로 설정했기 때문에 
         
       CREATE SEQUENCE SEQ_EMPID2
       START WITH 5
       INCREMENT BY 5
       MAXVALUE 15
       CYCLE -- 값 순환시 무조건 1부터 시작 (START WITH로 정한 5부터 시작하는 것이 아니다.)
       NOCACHE;
       
       SELECT SEQ_EMPID2.NEXTVAL FROM DUAL; --> 5, 10, 15, 1, 6, 11, 1, 6, 11 ....
       -> 최대값이 되고 숫자가 순환이 되면 5로 시작하는 것이 아니라 무조건 1부터 시작한다.   
       -> 그리고 현재 숫자가 몇인지 알고 싶을 때 확인하는 방법은 
       => SELECT SEQ_EMPID2.CURRVAL FROM DUAL; (하지만 반드시 NEXTVAL을 한번 실행한 후에 사용해야한다.)
     
     * 시퀀스는 주로 INSERT 구문에서 사용한다.
     -> INSERT INTO EMPLOYEE (EMP_ID, EMP_NO, EMP_NAME)
        VALUES (TO_CHAR(SEQ_EMPID2.NEXTVAL), '201225-1012345' , '윈터');
        INSERT INTO EMPLOYEE (EMP_ID, EMP_NO, EMP_NAME)
        VALUES (TO_CHAR(SEQ_EMPID2.NEXTVAL), '201225-1012333' , '카리나');
          
     * 시퀀스 수정 
      -> 시퀀스 객체 수정 시  START WITH는 수정을 못하고 나머지는 모두 수정이 가능하다. 
      -> 만약 START WITH를 수정하고 싶으면 시퀀스 객체를 지우고 다시 만들어야 한다.
      -> 시퀀스를 변경 후 변경 내용은 그 이후 사용시에 적용된다.
      ->  ALTER SEQUENCE 시퀀스 이름
         [INCREMENT BY 증가치]
         [MAXVALUE 최대값 | NOMAXVALUE]
         [MINVALUE 최소값 | NOMINVALUE]
         [CYCLE | NOCYCLE]
         [CACHE | NOCACHE]
         
       예) CREATE SEQUENCE SEQID2
           START WITH 100
           INCREMENT BY 1
           MAXVALUE 110
           NOCYCLE
           NOCACHE;
           
           ALTER SEQUENCE SEQID2
           INCREMENT BY 5; --> 1씩 증가에서 5씩 증가로 변경
      
      * 시퀀스 삭제 
       -> DROP SEQUENCE 시퀀스 이름;
       
 =================================================================================================================
 * VIEW 뷰 
  -> SELECT 쿼리문을 저장하는 객체 
  -> 쿼리문을 저장해 놓았다가 필요시에 저장해 놓은 SELECT문을 가져다 쓴다.
  -> 또한 만개 또는 천개의 쿼리문 같은 복잡한 쿼리문을 뷰에 저장해놓고 실행시키면 속도가 빨라진다.
  -> 그 이유는 미리 컴파일 또는 해석(번역)해 놓은 상태로 저장해 놓으니까 결과가 빠르다. 또는 
  -> 다른 사람이 쿼리문을 보면 안될 경우에도 뷰를 사용한다.
  -> 작성법 CREATE OR REPLACE VIEW 뷰 이름
            AS 서브쿼리 (SELECT 문)  < -- 뷰에 저장할 SELECT 쿼리문
            => 뷰는 수정 기능이 없어 뷰 객체가 없으면 만들고 있으면 기존 뷰에 덮어 쓴다 (자바의 오버라이딩 개념)
            => 즉 뷰는 CREATE 와 DROP 만 있다.
            
            CREATE OR REPLACE VIEW V_EMP_DEPT90
             AS
             SELECT EMP_NAME, DEPT_NAME, JOB_TITLE, SALARY
             FROM EMPLOYEE
             LEFT JOIN JOB USING (JOB_ID)
             LEFT JOIN DEPARTMENT USING (DEPT_ID)
             WHERE DEPT_ID = '90';
             
             => 처음 실행시 "insufficient privileges" 에러 발생하면 
             => 관리자 계정 (사용자계정을 만든 계정) 에 권한을 부여 받아야한다.
             => SYSTEM 계정으로 접속 : GRANT CREATE VIEW TO c##student;
             => 뷰 사용 : 테이블처럼 사용한다.(인라인뷰로 작동됨)
                         SELECT * FROM V_EMP_DEPT90; 
 ==============================================================================================================================
 * 인덱스 INDEX 
  -> SELECT 문의 처리속도를 향상 시키기 위해 컬럼에 생성하는 객체
  -> 해당 컬럼 값으로 조회 할 떄 검색 속도를 빨리 하기 위해 이용하는 객체 (무조건은 빠른건 아니다) [적당한데이터가 있으면 효과있음]
  -> 구문형식 : CREATE [UNIQUE] INDEX 인덱스 이름
                ON 테이블명 (컬럼명) => 함수 계산식도 올수 있지만 일반적으로 컬럼명
                
        예) CREATE UNIQUE INDEX IDX_DNM --> UNIQUE 제약조건과 같은 의미에 INDEX 
            ON DEPARTMENT (DEPT_NAME);
          
            CREATE INDEX IDX_JID
            ON JOB (JOB_ID); --> NON UNIQUE INDEX
            
            * 인덱스 객체 삭제
            DROP INDEX 인덱스 이름;
          
          
      ※ 참고 : 사용자가 만들지 않아도 자동으로 만들어지는 경우가 있다 (PRIMARY KEY , UNIQUE 제약조건으로 이미 자동으로 만들어져 있다.)
         인덱스 객체는 내부적으로 이진 탐색 트리 구조를 가지고 있다.
         이진 탐색 트리 구조 방식으로 EMPLOYEE 테이블의 사번 컬럼에 값에서 중간 값을 찾아낸다 그 것을 트리구조에서 루트노드라고한다.
         그 다음 그 중간값 보다 작으면 왼쪽 크면 오른쪽 으로 나눈다 이러한 방식을 바이너리 이진이라고 한다.
         하지만 인덱스 객체는 이러한 이진 트리 구조로 되어 있어 구축하는데 시간이 많이 걸리며 저장하는 디스크 공간도 따로 필요하는 단점이 있다.
         
           
