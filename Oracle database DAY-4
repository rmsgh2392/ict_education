※ 오늘 배운 내용 복습 ※

[1]. 문자열 함수 
     (1) LTRIM() / RTRIM()
     (2) TRIM()
     (3) SUBSTR() 
     (4) SUBSTRB()
     (5) UPPER()
     (6) LOWER()
     (7) INTICAP()
     
[2]. 숫자함수 
     (1) ROUND()
     (2) TRUNC()
     (3) FLOOR()
     (4) ABS()
     (5) MOD()
[3]. 날짜 함수 
     (1) SYSDATE 
     (2) ADD_MONTHS()
     (3) MONTHS_BETWEEN()
     (4) NEXT_DAY()
     (5) LAST_DAY()
     (6) SYSTIMESTAMP, CURRENT_DATE, CURRENT_TIMESTAMP
     (7) EXTRACT()
[4]. 데이터 형변환 함수
     (1) TO_NUMBER(), TO_CHAR(), TO_DATE()
 ========================================================
 (1).LTRIM()  / RTRIM()
 -> 표현식 : LTRIM('문자열 리터럴'| 컬럼명, 제거하려는 문자(열)) / RTRIM('문자열 리터럴'| 컬럼명, 제거하려는 문자(열))
 -> 문자열 리터럴이나 컬럼명에 있는 문자가 있을때 만약 제거하려는 문자가 'ca123' 이면 ca123이 한문장이 아니라
 -> c,a,1,2,3 을 하나씩 판별해!문자(열)중에 제거하고 싶은 문자가 있으면 지워나가다가 제거하려는 문자가 아닌 문자를 만나면 종료하고
 -> 문자를 반환한다. LTRIM은 왼쪽부터 제거 / RTRIM 오른쪽부터 제거
 -> 두 번째 인자에 제거하려는 문자를 생략하면 기본적으로 공백을 제거한다.

 (2). TRIM()
 -> TRIM 함수도 문자를 제거할 때 사용하는 함수 하지만 다른점은 단 한 글자만 제거할 수 있는 제약사항이 있다.
 -> 표현식 : TRIM(LEADING | TRAILING | BOTH [trim_char] FROM trim_source) 
 -> TRIM(LEADING | TRAILING | BOTH '제거하고 싶은 문자 하나' FROM 문자리터럴 | 컬럼명 )
 -> 명시적으로 써주지 않으면 기본이 BOTH 이므로 문자(열)에 양쪽 다 제거하는 문자를 제거한다.
 -> LEADING :앞 제거 / TRAILING : 뒤 제거

(3) SUBSTR() <-> 자바에서 substring() 함수와 동일하게 원하고 싶은 문자를 반환한다. 
-> 표현식 : SUBSTR(문자리터럴 | 컬럼명, position[잘라내고 싶은 위치], [length :반환하고 싶은 문자 개수])
-> position : 추출하고 싶은 문자 위치 양수이면 앞에서 부터 음수이면 뒤에서부터
-> length : 추출할 문자 개수 (생략하면 문자 끝까지 추출해 반환한다.)
-> SUBSTRB() : LENGTHB()와 비슷한 함수로서 글자의 바이트 크기를 가지고 사용한다.
-> 표현식 SUBSTRB(문자열리터럴 | 컬럼명 , 추출할 시작 바이트 위치, 추출할 바이트)
예)SELECT SUBSTR('ORACLE', 3, 2),  -- AC
        SUBSTRB('ORACLE', 3, 2),  --AC
        SUBSTR('오라클', 2, 2),   --라클
        SUBSTRB('오라클', 4, 6)
   FROM DUAL;
   
(4) UPPER() <-> 자바에 TO UPPER CASE랑 같다.
-> 문자열 리터럴이나 컬럼명에 기록된 문자 값이 소문자이면 대문자로 변환해 반환하는 함수 
-> 표현식 :  UPPER('abcd') / 결과 -> ABCD
-> 영문자일때!
(5) LOWER()  
-> UPPER() 함수와 반대로 문자 값이 대문자이면 소문자로 변환해 반환하는 함수 
-> 표현식 : LOWER('ABCD') / 결과 -> abcd
-> 영문자일때
(6) INTICAP()
-> 영문자 일때 첫 글자만 대문자로 변환해 반환하는 함수 
=================================================================================================
(1) ROUND() 
-> 숫자 데이터를 정수나 실수를 자동으로 반올림하여 값을 반환하는 함수
-> 표현식: ROUND(숫자 | 컬럼명 | 계산식, 반올림할 자릿 수) / ROUND(NUMBER, [DECIMAL PLACES])
-> [DECIMAL PLACES]을 생략하면 기본이 0이고 소수점 아래 값을 버리고 반환한다.
-> [DECIMAL PLACES] 버려지는 자리 값이 5이상이면 자동으로 반올림 하여 값을 반환
-> [DECIMAL PLACES] 양수 : 소수점 아래 자리를 의미하며 (그 자리 까지 표시한다) 
   예) 123.456 -> ROUND(123.456, 2) / 결과 -> 소수점 두자리까지 반환하고 6은 5이상이므로 반올림 되어 123.46이 반환
-> [DECIMAL PLACES] 음수 : 소수점 왼쪽 정수부분 자리를 의미하며 해당 자리 자리 값을 올림|내림처리한다.
   예) ROUND(123.456, -2) / 결과 -> 100 -2는 정수부분 2를 가리키는 거고 2는 5미만이기 때문에 내림처리 되어 100을 반환
(2) TRUNC()
-> 절삭함수라고 불리며 반올림 없이 버리고 반환하는 함수
-> TRUNC(숫자 | 컬럼명, [DECIMAL PLACES])
-> [DECIMAL PLACES] 생략하면 기본이 0(소수점 위치)이다.
-> [DECIMAL PLACES] 지정한 자릿 수(양수) 또는 음수이면 반올림 없이 버리고 반환한다.
   SELECT 145.678, 
        TRUNC(145.678), -- 145
        TRUNC(145.678, 0), --145
        TRUNC(145.678, 1), --145.6
        TRUNC(145.678, -1), --140
        TRUNC(145.678, -3)  --0
    FROM DUAL;
(3) FLOOR () 
-> 정수로 바꾸어 반환하는 함수 (소수점 아래 값을 버리는 함수)
-> TRUNC와 똑같은 원리 지만 자릿수를 포함하지 않는다.
-> FLOOR(숫자 | 컬럼명 | 계산식)
(4) ABS()
-> 숫자가 있으면 절대 값을 반환하는 함수
    예) ABS(-124) / 결과 -> 124 / ABS(숫자 | 컬럼명 | 계산식)
-> 절대 값 개념 : 음수이면 양수로 바꾸고 양수이면 그대로 나둔다
(5) MOD()
-> 컴퓨터는 한번에 두가지를 처리하지 못한다
-> 자바에서 숫자 / 숫자에 나머지를 구하 싶을 때 피연산자 % 연산자로 표현하여 나머지를 구한다.
-> 데이터베이스에서는 함수를 이용하여 나머지를 구한다 그것이 MOD() 
-> MOD(나눌 대상 값 , 나눌 수)
 예) MOD(25, 4) 
 =========================================================================================숫자함수
 (1) SYSDATE 
 -> 오늘 날짜를 구하는 함수 특이점은 다른 함수와 다르게 () 를 쓰지 않는다.
 -> 컴퓨터시스템에서 오늘 날짜/시간을 조회하는 함수
 -> 오라클에서 기본 날짜 포맷 형식은 년도(2자리)/월(2자리)/일(2자리)
 * 만약 이 날짜 포맷 방식을 바꾸고 싶다면 데이터베이스 딕셔너리에 들어가 포맷을 새로 셋팅 해야한다.
   # 여기서 데이터딕셔너리(데이터 사전) 이란 ? 
   데이터베이스는 데이터베이스 객체를 가지고 있으며 환경설정 같은 정보들을 저장 관리 하고 있다.
   모든 데이터 정보는 데이터딕셔너리에 저장되어 관리 되고 있으며 데이터베이스 사용자는 딕셔너리에 손댈 수 없고 관리할 수도 없고
   DB시스템이 관리한다. 데이터 딕셔너리 영역은 데이터를 테이블 형태로 각각 저장되면서 관리되고 있다.
   사용자는 SELECT 구문을 이용하여 딕셔너리에 저장된 정보를 조회하여 테이블 형태로 볼 수 있는 것이다.
   이런 딕셔너리 중 환경설정과 관련된 딕셔너리가 있으며 설정 정보만 일부 변경 가능하다.
   -> 원래는 손대지 못한다.
   -> 환경설정과 관련된 딕셔너리의 이름은
   -> SYS.NLS_SESSION_PRAMETERS / SELECT * FROM SYS.nls_session_parameters; -> 환경설정과 관련된 모든 설정들을 조회한다.
   -> 그 다음 날짜 포맷과 관련된 변수 값만 조회한다.
   -> SELECT VALUE FROM SYS.NLS_SESSION_PARAMETERS WHERE PARAMETER = 'NLS_DATE_FORMAT';
   -> NLS_DATE_FORMAT을 가지고 날짜 설정을 변경
   -> ALTER SESSION SET NLS_DATE_FORMAT = 'DD-MON-RR'; 으로 설정을 바꾸고 다시 조회하면은
   -> 21/03/04  ---> 21-03-04 로 바뀌고 조회된다.
 (2) ADD_MONTHS()
 -> 어떤 날짜에 월 수를 더하는 함수 
 -> 몇 개월 뒤에 날짜를 알고 싶을 때 사용 예로 들자면 오늘 날짜에 10년뒤 날짜를 구하고 싶으면 120개월을 더해주면 된다.
 -> ADD_MONTHS(date, N) 반환타입은 DATE 
 -> date : 기준이 되는 날짜 / N date에 더하려는 월 수 
 -> 더한 개월 수에 대한 날짜가 반환된다.
 (3) MONTHS_BETWEEN()
 -> 두 날짜를 인자로 받아 몇 개월 차이나는지 확인하는 함수 
 -> MONTHS_BETWEEN(날짜리터럴|컬럼명|날짜함수, 날짜리터럴|컬럼명|날짜함수)
 -> 두 날짜의 개월 수 차이를 반환
 (4) NEXT_DAY()
 -> NEXT_DAY(날짜리터럴 | 컬럼명, 요일 이름)
 -> 지정한 날짜 뒤에 2번 째 인자의 가장 가까운 요일의 날짜를 조회해 반환한다.
 -> 오늘이 목요일이라면 오늘 날짜에 다음주 화요일은 몇일이냐 ? 할때 사용하여 구하는 함수 돌아오는 날짜 조회
 -> 여기서 주의할점 요일 이름을 한글로 월요일 또는 영어로 MONDAY를 쓸지 헷갈리는 경우가 있다.
 -> 하지만 환경설정과 관련된 딕셔너리 현재 DBMS에서 KOREAN(한글)로 포맷되어 있어서 한글로 작성해야한다.
 -> 만약 영어로 작성하고 싶으면 위에서 날짜의 설정으 바꾸듯이 환경설정에 들어가서 바꿔야 한다.
 -> ALTER SESSION SET NLS_LANGUAGE = AMERICAN;
(5) LAST_DAY()
-> 지정한 날짜의 월에 대한 마지막 날짜를 반환하는 함수 DATE형으로 반환
-> LAST_DAY(날짜리터럴 | 컬럼명)
-> 만약 LAST_DAY('20/10/3') / 결과 -> 20/10/31
(6) SYSTIMESTAMP, CURRENT_DATE, CURRENT_TIMESTAMP
-> SYSDATE 함수는 시간/분/초를 내장하고 있지만 출력하지 못한다.
-> 이 4가지 함수는 () 를 쓰지 않는다
(7) EXTRACT()
-> 표현식 : EXTRACT(추출할 정보 FROM 날짜)
-> 날짜데이터에서 원하는 정보만 출력하고 싶을 때 사용하는 함수
-> 추출할 정보입력: YEAR(년도), MONTH(월), DAY(일), HOUR(시간) MINUTE(분), SECOND(초)
-> 예) SELECT SYSDATE, 
        EXTRACT(YEAR FROM SYSDATE),
        EXTRACT(MONTH FROM SYSDATE),
        EXTRACT(DAY FROM SYSDATE)
       FROM DUAL;
 ==========================================================================================
[데이터 타입 형 변환 함수]
1. 문자를 숫자로 변환 하는 함수  TO_NUMBER()
2. 문자를 날짜로 변환하는 함수 TO_DATE()
3. 숫자를 날짜, 문자로 변환하는 함수가 아닌 포맷 즉 출력형식을 정해주는 것 TO_CHAR()

-> 데이터베이스에서 데이터 타입은 숫자, 문자, 날짜형이 있다.
-> 암시적 형변환(자동 형변환) / 명시적 형변환 (강제 형변환) 
-> 여기서 자동 형변환은 따로 해줄 필요가 없다.
-- SELECT 25 + '12' FROM DUAL; (자동 형변환)
-> 기본적으로 CPU는 같은 종류의 타입을 가지고 연산한다,
-- SELECT 25 + TO_NUMBER('12') FROM DUAL; (명시적 형변환)
-> 하지만 자동 형변환이 안되는 것이 있다. DATE형에서 CHAR형으로 자동 형변환이 안된다.
-- SYSDATE - '15/01/03' ->(ERROR) DATE - CHAR : 자동형변환이 안됨 X
-- 그럼 명시적으로 형변환을 해줘야한다.
-- SYSDATE - TO_DATE('15/01/03') 주의! 형식은 00/00/00 맞춰줘야한다. !

※ 제일 중요하고 헷갈리는 TO_CHAR() 함수
-- 사용 목적은 숫자형과 날짜형을 문자형(포맷적용)으로 바꿔라
-- TO_CHAR(input_type, [format]) / TO_CHAR(숫자값 | 숫자가 기록된 컬럼명, '포멧지정용문자열') / TO_CHAR('날짜데이터' | 날짜가 기록된 컬럼명, '포멧지정문자열')
-> format이 중요하다 !!!! 주로 숫자의 통화단위 ($, 원화표시) / 천단위 구분표시 1,000,000 /  소수점 표시
-> 실수형 데이터는 지수형(과학용)으로 표시
-> 예) 데이터가 1000이면 TO_CHAR(1000, 99,999L) => 1,000원화 / O9/12/31 -> 2009-12-31 
-> 이렇게 표현하는 방식을 바꿔주는 것이 FORMAT 포맷이고 하기 위해서 사용하는 함수가 TO_CHAR()!!
===========================================================================================================================================





