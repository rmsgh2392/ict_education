====================DAY-6 학습내용=====================================
1. ORDER BY 
2. GROUP BY
3. HAVING
4. TOP N 분석함수 RANK(), ROLLUP(), CUBE()
5. JOIN -> INNER JOIN
        -> OUTER JOIN -> LEFT [OUTER] JOIN, RIGHT[OUTER] JOIN, FULL [OUTER] JOIN
        -> CROSS JOIN
        -> SELF JOIN
        -> NON EQUALJOIN
=======================================================================
1. ORDER BY : SELECT 절에 나열 된 컬럼들을 가지고 정렬을 한다.
  -> 사용형식 : ORDER BY 정렬기준1 정렬조건, 정렬기준2 정렬조건, 정렬조건3 정렬조건 .... 
  -> 위치는 SELECT 구문 가장 마지막에 사용하며 실행순서도 제일 마지막에 작동한다.
  -> 정렬기준은 SELECT절에 나열된 컬럼명 | 컬럼별칭 | 컬럼 나열순번 (순번은 첫번째 컬럼명을 기준으로 1부터 시작한다.)
  -> 정렬조건은 ASC(오름차순) 와 DESC(내림차순)가 있다. 기본이 ASC 오름차순이며 아무것도 안써주면 오름차순으로 정렬한다.
  -> 예) SELECT EMP_NAME(순번1), EMP_ID, DEPT_ID(순번2), EMP_NO 주민번호
         FROM EMPLOYEE
         ORDER BY EMP_NAME ASC, 2 DESC, 주민번호 DESC -> 이렇게 컬럼명을 써도되고 SELECT절에 나열된 순번을 사용해도 되며 별칭을 사용해도된다.
         ※만약 첫번 째 정렬 후에 정렬기준 컬럼값에 같은 값이 있을 때 두번 째 정렬기준으로 같은 값이 있는 행들만 재정렬할 수 있다.
         ## 정렬한 값 중에 NULL이 있을 때 NULL의 위치는 기본적으로 맨 위에 있다(중간, 아래 랜덤이다.) 이 NULL 값을 가진 행들을 맨 마지막에 배치하고 싶을 때
            NULL이 포함된 컬럼명 뒤에 NULLS LAST 라고 적어주어 사용한다. 기본값은 NULLS FIRST
            -> 예) ORDER BY DEPT_ID DESC NULLS LAST;
            
 =================================================================================
 2. GROUP BY 절
  -> 같은 값 들이 여러개 기록된 컬럼에 대해 그룹을 묶을 수 있다 즉 컬럼명에 같은 값이 있을 때 같은 값끼리 그룹핑 하는것이다.
  -> 우리말로 부서별로 (GROUP BY) 그룹핑 했을 때 그 그룹에 그룹함수(SUM(), AVG(), MIN(), MAX()등등)를 쓰면 그 그룹별로 그룹함수가 적용이 된다.
  -> 사용형식 : GROUP BY 컬럼명 |  그룹핑을 위한 계산식
  -> 사용하는 위치는 WHERE절 아래에 사용하며 순서도 WHERE절 다음에 실행된다.
  -> GROUP BY절에 처리한 항목들은 SELECT 절에 그룹함수와 함께 항목들을 사용할 수 있다.
  -> 주로 그룹함수를 사용하기 위해 그룹핑을 한다.!! 그룹핑한 그룹들에 대해 각각 그룹함수가 적용
  -> 주의사항 : SELECT절 전에 즉 WHERE절 다음에 실행되기 떄문에 SELECT절에 썼던 별칭과 순번은 사용할 수 없다.!!
  ===================================================================================
  3. HAVING
    -> 그룹핑한 값들에 대해 그룹함수 적용을 하여 나온 결과 값에 대한 조건처리를 위해 사용한다. 
    -> 즉 GROUP BY 한 계산 값들 중에 조건을 만족하는 값을 골라내야 될 때 사용한다.
    -> GROUP BY 없이는 HAVING을 쓰지 못한다.!!!
    -> 사용형식 : HAVING 그룹함수(그룹핑한 컬럼명) 비교연산자, 비교값
    -> WHERE절과 다른점은 WHERE절은 단일 행의 개념이고 HAVING은 그룹의 개념이다.
    ======================================================================================
    4. 분석함수 
      -> 탑앤분석 : 상위 몇개 하위 몇개 정보를 추출할 수 있는 쿼리문
      -> 일반 함수와 사용형식이 다르다.
     (1) RANK()함수
      -> 해당 컬럼의 전체 값들에 대한 순위(등수)를 반환한다. 컬럼 값에 등수를 매길때 사용
      -> 사용법이 2가지가 존재한다.
      -> 사용법 1: 값 전체에 순위를 매기는 경우 
          -> RANK() OVER (ORDER BY 순위 매길 컬럼명, 정렬방식(ASC, DESC))
          예) 급여를 많이 받는 순으로 순위를 매긴다면...
              -> SELECT EMP_NAME SALARY,
                        RANK() OVER (ORDER BY SALARY DESC) 순위
                  FROM EMPLOYEE
                  ORDER BY 순위;
      -> 사용법 2: 특정 값의 순위만 조회하고자 할 경우 
          -> RANK(순위를 알고자 하는 값) WITHIN GROUP (ORDER BY 순위매길 컬럼명, 정렬방식)
          예)급여 230만이 내림차순 정렬 했을 때 전체 급여 중 몇 순위?
            -> SELECT RANK(2300000) WITHIN GROUP (ORDER BY SALARY DESC) 순위
                FROM EMPLOYEE;
    (2) ROLLUP() 함수
      -> GROUP BY 절에서만 사용가능하다.
      -> 그룹별로 값을 묶어서 계산할 결과에 총 집계와 중간 집계를 표현할 때 사용한다.
      예) SELECT DEPT_ID, SUM(SALARY)
          FROM EMPLOYEE
          GROUP BY ROLLUP(DEPT_ID);
          --부서코드와 직급코드를 함께 그룹을 묶고 급여의 합계를 구해라
          SELECT DEPT_ID, JOB_ID, SUM(SALARY)
          FROM EMPLOYEE
          WHERE DEPT_ID IS NOT NULL AND JOB_ID IS NOT NULL
          GROUP BY ROLLUP(DEPT_ID, JOB_ID);
          ==================
          SELECT DEPT_ID, JOB_ID, SUM(SALARY)
          FROM EMPLOYEE
          WHERE DEPT_ID IS NOT NULL AND JOB_ID IS NOT NULL
          GROUP BY ROLLUP(DEPT_ID, JOB_ID);
          =======================
          SELECT DEPT_ID, JOB_ID, SUM(SALARY)
          FROM EMPLOYEE
          WHERE DEPT_ID IS NOT NULL AND JOB_ID IS NOT NULL
          GROUP BY ROLLUP(DEPT_ID, JOB_ID);
     *ROWID*
     -> 테이블에 데이터 기록 저장 시 (INSERT 문으로 행 추가 시) 데이터베이스가 자동으로 부여하며
     -> DBMS가 자동으로 관리하므로 사용자가 수정은 못하고 조회만 가능하다.!
     -> 데이터베이스 전체 중에 유일한 값이다!
     -> 컴퓨터 구조상 기본적으로 하드디스크에 파일형식으로 저장됨.
     -> 파일안에 몇번째 블록에 들어가있는지 블록번호
     -> 테이블에 몇번째 행에 있는지 알려주는 번호
     ==================================================================================
     5. JOIN 조인
      -> 여러 개의 테이블을 하나로 합쳐서 큰 테이블을 만든 다음 필요한 컬럼들의 정보들을 조회하는 방식
      -> JOIN의 구문은 ORACLE 전용구문과 ANSI 표준구문으로 작성할 수 있다.
      -> JOIN의 기본이 EQUAL JOIN이다 그 말은 각 테이블의 같은 값을 가진 컬럼을 이용해, 일치하는 값끼리 연결하는 구조이다.
      -> 오라클 전용 구문 : FROM 절에 조인할 테이블 이름을  ',' 로 나열을 해준다
      -> 그 다음 WHERE절에 합칠 조건을 작성 WHERE 테이블명 1컬럼명 = 테이블명2 컬럼명
      예) SELECT 컬럼명 FROM EMPLOYEE, DEPARTMENT, JOB ....WHERE EMPLOYEE.DEPT_ID = DEPARTMENT.DEPT_ID....
      -> ANSI 표준구문은 모든 DBMS가 공통으로 사용하는 표준구문이다.
      -> ANSI 표준구문의 JOIN 표현은 두가지로 나뉜다.
          => JOIN USING : 두 테이블의 연결할 컬럼명이 같을 때 사용
          예) SELECT...FROM EMPLOYEE JOIN DEPARTMENT USING(DEPT_ID)
          => JOIN ON : 두 테이블의 연결 할 컬럼명이 다를 때 사용 단 값이 일치해야한다.
          예) SELECT...FROM DEPARTMENT JOIN LOCATION ON LOC_ID = LOCATION_ID
          
      -> 조인은 기본이 INNER JOIN(EQUAL JOIN)이며 여기서 조건은 연결되는 컬럼의 값이 일치하는 행들만 조인이 된다.
      -> 일치하는 값이 없는 행은 조인에서 제외된다.
      -> 만약 일치하는 값이 없는 행도 조인의 결과에 포함하고 싶다면, OUTER EQUAL JOIN을 사용한다.
      -> OUTER JOIN 이라고도 하고 테이블에 없는 행을 추가해서 억지로 EQUAL이 되게 만들고 조인하는방식
      -> ORACLE 구문에서는 기준에 따라 테이블에 (+) 를 추가한다.
      -> 두 테이블의 일치하지 않는 행을 모두 조인에 포함시키고자 할 경우
        예) SELECT ... FROM EMPLOYEE E, DEPARTMENT D WHERE E.DEPT_ID = D.DEPT_ID(+)
      -> ANSI 표준은 어느 테이블에 기준을 맞출거냐에 따라 LEFT, RIGHT JOIN으로 나뉜다.
        예) SELECT ...FROM EMPLOYEE LEFT JOIN DEPARTMENT USING(DEPT_ID) ...
            -> 왼쪽 EMPLOYEE를 기준으로 EMPLOYEE에 전체 행과 DEPARTMENT에 일치하는 행을 출력
            SELECT ... FROM EMPLOYEE RIGHT JOIN DEPARTMENT USING(DEPT_ID)
            -> 오른쪽 DEPT_ID를 기준으로 조인한다.
            
            
      *CROSS JOIN* 
        -> 관계가 없는 테이블을 조인 할 때 CROSS JOIN을 사용한다. 즉 연결할 컬럼이 없는 경우 사용
        -> N개행 * M개행의 결과과 만들어진다. 3개의 행 * 4개의 행 총 12개의 행
        -> ANSI 표준구문
          예) SELECT * FROM LOCATION CROSS JOIN COUNTRY;
           오라클 전용 구문
          예) SELECT * FROM LOCATION, COUNTRY;
          
      *NON EQUAL JOIN*
        -> 지정하는 컬럼의 값이 일치하는 경우가 아닌, 값의 범위에 해당하는 행들을 연결하는 조인
        예) 직원들의 급여에 대한 등급을 매기고자 할 경우
            SELECT *
            FROM EMPLOYEE
            JOIN SAL_GRADE ON (SALARY BETWEEN LOWEST AND HIGHEST);
            
      *SELF JOIN*
      -> 같은 테이블을 두번 조인하는 경우 
      -> 같은 테이블 안의 다른 컬럼을 외래키로 참조하고 있는 경우에  사용할 수 있다.
      -> EMP_ID 직원의 사번, MGR_ID 관리자인 직원의 사번 (EMP_ID 참조한다.)
      -> 직원 중에 관리자인 직원을 의미
      -> ANSI 표준 테이블 별칭 사용 JOIN ON 사용
      -> SELECT *
         FROM EMPLOYEE E JOIN EMPLOYEE M
         ON E.EMP_ID LIKE M.MGR_ID;
      -> 오라클 전용 구문
      -> SELECT *
         FROM EMPLOYEE E, EMPLOYEE M
         WHERE E.EMP_ID LIKE M.MGR_ID;
      
      * N개의 테이블 조인*
        -> N개의 테이블을 조인 할 시 순서가 매우 중요하다 !!
        -> 첫번 째 두번 째가 조인되고 나서 조인 결과에 세번 째가 조인되는 구조 
            
   
