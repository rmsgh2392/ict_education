================== DAY 3일차=======================
#목차 
[1] 연결연산자
[2] LIKE 연산자 , 와일드카드
[3] NULL
[4] 함수
    1. 단일 행 함수
       (1) 종류
       (2) 예제문제 
    2. 그룹 함수
       (1) 종류
       (2) 예제문제
 ==================================================
 [1] 연결 연산자 : 여러 컬럼을 하나의 문장 처럼 출력하고 싶을 때 사용 (자바의 println("출력메시지" +출력값))
     SELECT절에서 조회한 컬럼값들의 연결처리를 해서 하나의 문장을 만들거나  컬럼값 뒤에 단위 등을 표시할 때 이용
     SELECT문에서 사용하며 ' || + '문자열' ' 파이프 문자 자바에선 OR연산자처럼 사용한다. 
 예) SELECT SALARY || '(원)'
 
     SELECT EMP_NAME || '직원의 급여는' || SALARY || '원 입니다.'
     FROM EMPLOYEE
     WHERE DEPT_ID LIKE '90';
     
     SELECTE EMP_NAME || '직원의', || HIRE_DATE || '입사', SALARY || '(원)',
             '기혼' 결혼여부 ==> 문자열 리터럴 사용
     FROM EMPLOYEE
     WHERE HIRE_DATE >= '00/01/01' AND MARRIAGE LIKE 'Y'
 [2] LIKE 연산자와 와일드 카드
     문자열 값에 대한 패턴을 제시해 패턴과 일치하는 문자열 골라낼때 사용
     와일드카드 문자를 사용한다. 
     <> NOT LIKE 는 패턴과 일치하지 않는 값을 조회
     (1) % : 0개 이상의 글자 
        예) 김씨 성을 가진 직원 정보 조회
            SELECT *
            FROM EMPLOYEE
            WHERE EMP_NAME LIKE '김%'
            
            직원이름에 '해'자가 포함되어 있는 직원 정보 조회
            SELECT *
            FROM EMPLOYEE
            WHERE EMP_NAME LIKE '%해%'
     (2)'_' : 글자 한자리
        예) 전화번호의 국번(4번째자리값이)'9' 로 시작하는 직원 정보 조회
            SELECT *
            FROM EMPLOYEE 
            WHERE PHONE LIKE '___9%'
            
            성별이 여자인 직원 정보 조회 (주민번호 뒷자리 처음숫자가 2로 시작하면 여성인 정보를 활용)
            SELECT *
            FROM EMPLOYEE
            WHERE EMP_NO LIKE '_______2%'
  [3] NULL : NULL은 즉 값이 비어있다/없다는 의미로 비교 할수 없고 연산도 할 수 없다.
             WHERE절에 컬럼명 값이 NULL인 행을 조회 -> WHERE 컬럼명 IS NULL;
             WHERE절에 컬럼명 값이 NULL이 아닌 행을 조회 -> WHERE 컬럼명 IS NOT NULL;
  [4] 함수 : SELECT 구문에서 사용되는 FUNCTION 함수
             컬럼에 기록 된 값이 문자, 숫자, 날짜 값들을 읽어서 처리한 결과를 반환하는 형태
             일반적으로 함수명(컬럼명) 사용하며 함수(함수())안에 함수 중첩이 가능하다.
      (1) 단일 행 함수 : 행 단위로 한개씩 한개씩 처리하는 함수 읽은 값이 N개 이면 반환 하는 값도 N개 
          1.문자열 함수 : 입력 값 (문자) -> 반환 값(숫자) / 입력 값(문자) -> 반환 값(문자)
                         EX)LTRIM()/RTRIM()/TRIM()<자바에서 TRIM함수는 공백제거> / INSTR() 글자의 위치 <자바에서 indexof>
             ⓐ LENGTH() 함수 : LENGTH(컬럼명 또는 임의의 문자열) 입력 값 (문자) -> 반환 값 (숫자)
                              기록글자의 바이트 수가 아닌 개수를 반환한다.
                예) SELECT LENGTH('ORACLE'), LENGTH('오라클') FROM DUAL; =>결과 6, 3
             ⓑ LENGTHB() 함수 : 기록 글자의 바이트 크기를 반한 ※컴퓨터에서 기본적으로 한글 1글자가 2Byte 영어는 1Byte
                예) SELECT LENGTHB('ORACLE'), LENGTHB('오라클') => 결과 6, 9
             ⓒ INSTR() 함수 : 사용자가 입력한 글자 위치를 반환 
                               INSTR(컬럼명|문자열리터럴, '찾고 싶은 문자', 찾을 시작위치, 중복 갯수포함 몇개까지)
                예) SELECT EMAIL INSTR(EMAIL, '@') FROM EMPLOYEE;
                   -> 이메일 컬럼에 @ 문자가 몇번 째 위치해 있는지 조회
                    SELECT EMAIL INSTR(EMAIL, 'K', -1, 3) FROM EMPLOYEE; => 컴퓨터는 기본적으로 시작이 0이지만 DB는 1
                   -> 이메일 컬럼에 k 문자가 몇번 째 위치해 있는 지 조회하고 -1은 포지션이므로 시작부터 찾으면서
                      js_fsdfd@kkk.com 값이 있으면 3은 k가 중복되어도 3번째 중복되는 위치를 조회
                       *함수 중첩 예*
                   --> 이메일에서 '.' 문자 바로 뒤에 있는 'c' 문자의 위치를 조회
                   --> 단, '.' 문자 바로 앞글자부터 검색 시작하도록 함
                       SELECT EMAIL, INSTR(EMAIL, 'c', INSTR(EMAIL, '.') - 1)
                       FROM EMPLOYEE;
             ⓓ LPAD(왼쪽에 문자 채우기), RPAD(오른쪽에 문자 채우기) 
                LPAD(1.컬럼명|임의의 문자열, 2.출력할 너비크기, 3.남은공간에 채울 문자)
                3번째 인자에서 공간에 채울 문자가 생략되면 기본 값은 공백 문자 ' ' 로 채워진다.
                SELECT EMAIL 기본,
                       LENGTH(EMAIL) 원본글자수, => 15, 14, 13
                       LPAD(EMAIL, 20, '#') 채우기결과, 
                       LENGTH(LPAD(EMAIL, 20, '#'))
                FROM EMPLOYEE;
                ==> LPAD(EMAIL, 20, '#') 이메일 컬럼에 20byte크기만큼 너비를 넓히고 이메일을 채운다음 남은 공간 왼쪽에 #으로 채운다.
                SELECT  EMAIL 기본,
                        LENGTH(EMAIL) 원본글자수,
                        RPAD(EMAIL, 20, '#') 채우기결과,
                        LENGTH(RPAD(EMAIL, 20, '#'))
                FROM EMPLOYEE;
                ==> RPAD(EMAIL, 20, '#') 이메일 컬럼에 20byte크기만큼 너비를 넓히고 이메일을 채운다음 남은 공간 오른쪽에 #으로 채운다.
               
       (2) 그룹 함수 : 말 그대로 묶는다. 읽은 값이 N개 이면 반환하는 값은 1개! 또한 그룹 함수는 SELECT, HAVING절에서 사용가능!!
                       WHERE절에는 사용 불가능 이유는 WHERE 조건식에서는 한 행씩 조건을 비교하며 행을 필터링 하기 때문에
            
            1. SUM() 함수: 컬럼에 기록 된 값(숫자)들의 총 합의 결과를 숫자로 반환
                   표현->SUM(컬럼명), SUM(DISTINCT 컬럼명) 
               예) SELECT SUM(SALARY) FROM EMPLOYEE;
            2. AVG() 함수: 컬럼에 기록 된 값(숫자)들의 총 평균의 결과를 숫자로 반환
                           만약 NULL 값이 있다면 제외하고 계산
                           표현->AVG(컬럼명), AVG(DISTINCT 컬럼명), 만약 NULL값을 포함해서 계산 AVG(NVL(컬럼명,0)) 
               예) SELECT AVG(SALARY) FROM EMPLOYEE
               
            3. MAX(), MIN() 함수: 이 두함수는 숫자, 문자, 날짜 데이터를 읽어도 반환하는 값도 그 데이터에 맞게 반환한다.
                                  문자형(CHAR, VARCHAR2, LONG, CLOB), 숫자형(NUMBER), 날짜형(DATE).. 모든 자료형 사용가능
               표현 -> MAX(컬럼명), MAX(DISTINCT 컬럼명), MIN(컬럼명), MIN(DISTINCT 컬럼명)
               만약에 날짜 데이터에 MAX() 이면 제일 최신 날짜 MIN()이면 제일 오래된(전)날짜
                     알파벳 데이터이면 알파벳 순서 유니코드에서 젤 작은 값 큰 값
            
            4. COUNT() 함수 : 조회한 결과 (Result Set)에 행의 개수!
               표현-> COUNT(*) 전체 행의 개수 , COUNT(컬럼명) NULL을 제외한 행의 개수, COUNT(DISTINCT) 중복을 제외한 행의 개수
               
               
            ※ 이렇게 단일행 함수와 그룹함수는 SELECT절에서 사용하지만 함께 사용하지 못 한다
               ORDB (Object Relational DataBase) : 객체 관계형 데이터베이스
               지금 쓰고 있는 ORACLE은 RDBMS 관계형 데이터베이스이므로 2차원 테이블(표) 구조로 저장 데이터롤 표현한다. 
               SELECT UPPER(EMAIL), SUM(SALARY)   -- ERROR
               FROM EMPLOYEE;
 
 
 
               
               
               
               
               
  
  
         
